<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html><head>





  
  <meta content="text/html; charset=ISO-8859-1" http-equiv="content-type"><title>RXF-Configuration</title>
  

  
  
  <link rel="stylesheet" href="wst.css" type="text/css" media="screen">

  
  <link rel="stylesheet" href="wst_print.css" type="text/css" media="print">

  
  <meta http-equiv="content-type" content="text/html; charset=utf-8"></head><body>
<div id="View">
<script src="TOC.js" type="text/javascript"> </script>
<div id="Content">
<h1><a name="WSTDeployer"></a><a name="IDE_Integration"></a>RXF Component Properties<br></h1>
<br>
The RXF can be completely configured inside your model.<br>
<br>
By applying the stereotype <b>"RXF",</b> new Properties Perspectives become available:<br>
<br>
<img style="width: 750px; height: 304px;" src="Images/RXF-Config/WillertRXF_PropertyPerspectives.png" alt=""><br>
<br>
Use those Properties to configure you RXF<br><img style="width: 460px; height: 289px;" src="Images/RXF-Config/WillertRXF_PropertyPerspectives_Tabs.png" alt="">
<br>
<br>
In the near feature Property Documentation will be available directly from Rhapsody.<br>
As long as Rhapsody Property Docu is not available, find it here:<br>
<br>
<a name="TAG_RTOS"></a>
<img src="Images/RXF-Config/rtos.png"><br>
Select the RTOS you want to use. Be aware that this
tag only tells the deployer which RXF sources to deploy. No RTOS files
are added to the IDE automatically. Your IDE Project has to contain all needed RTOS sources.<br>
<br>
<a name="TAG_Target"></a>
<img src="Images/RXF-Config/Target.png"><br>
Select the Target you want to use.<br>
Specific Target adaptations can be done inside your IDE project.<br>
<br>
<a name="TAG_EntryPoint"></a> WST_MAIN<br>

Should the RXF provide the main() operation or is it provided by RTOS / UserCode?<br>
If this tag is set to
fallse, no main() is generated and the RXF has to be started by the user
by calling the operations WST_MTSK_start() and WST_RTOS_startKernel(). These Operations can be called from a C or C++ context.
Take care that the RXF is initialized correct when using an own main routine.<br>
<br>
<a name="TAG_CMSIS_device_header"></a>
<img src="Images/RXF-Config/CMSISHeader.png"><br>
Only needed if Target == CMSIS<br>If
you use the CMSIS software pack mechanism for ARM CortexM development,
a file RTE_Components.h will be auto generated by uVision. In this file
you will finde a define CMSIS_devie_header wich contains the correct
include file for your selected controller. If your IDE don't provide
this mechanism, you can enter your CMSIS device header file here, for
example type "lpc17xx.h" here (with Quotes).<br>
<br>
<a name="TAG_WST_MAX_TIMEOUTS"></a>
<img src="Images/RXF-Config/MaxTimeouts.png"><br>
Define how many UML Timeouts can be <b>active</b> at the same time.<br>
<br>
<a name="TAG_WST_MS_PER_TICK"></a>
<img src="Images/RXF-Config/msTick.png"><br>
Set how many milliseconds representing one system tick / RTOS tick.<br>
This information is needed to convert UML timer into RTOS timer.<br>
<br>
<a name="TAG_WST_TIMEOUT_GUARANTEE_TIME"></a>
<img src="Images/RXF-Config/TimeoutGuranteeTime.png"><br>
Because timeouts are synchronized to a tick, the tick is responsible for the granularity.
Timeouts are round up to the next possible multiple of a tick period.<br>
If the system is used to capacity, a timeout could be scheduled at the end of a tick period.<br>
If this happens, the resulting timout time would be less than expected.<br>
To ensure a timout with minimum the desired value, 1 tick has to be added.<br>
This means that timeouts that are scheduled at the beginning of a tick period will take 1 tick longer than expected!<br>
Be aware that the timeout is only scheduled at this time and it can take even longer till it is scheduled.<br>
<br>
<a name="TAG_WST_FSM_MAX_NULL_STEPS"></a>
<img src="Images/RXF-Config/maxNullSteps.png"><br>
How many null transitions (transition without a trigger) can be
performed in a row until the WST error handler is called. (Infinity
loop protection)<br>
<br>
<a name="TAG_WST_HWM_ENABLED"></a>
<img src="Images/RXF-Config/HWM.png"><br>
Enables the high water marks to check how many memory blocks have been used at the same time. For more information please look <a href="WST_3-Technology_2-High-Water-Marks.htm">here</a>.<br>
<br>
<a name="TAG_WST_MTSK_AND_DEFAULT_PRIORITY"></a>
<img src="Images/RXF-Config/priority.png"><br>
Define the main task an default task priority.<br>
<br>
<a name="TAG_WST_MTSK_AND_DEFAULT_STACK_SIZE"></a>
<img src="Images/RXF-Config/StackSize.png"><br>
Define the main task an default task stack size.<br>
<br>
<a name="TAG_EVT_*"></a>
<img src="Images/RXF-Config/evtMem.png"><br>
The memory management is described in the section <a href="WST_3-Technology_1-Memory-Management.htm">Memory Management.</a><br>
<br>
<a name="TAG_WST_PORTS_ENABLED"></a>
<img src="Images/RXF-Config/Ports.png"><br>
Define if ports are supported by the RXF or not to save resources.<br>
<br>
<a name="TAG_WST_LIST_BLOCK_COUNT"></a>
<img src="Images/RXF-Config/ListBlockCount.png"><br>
Define the default value of how many ListBlocks are used in ordered associations.<br>
<br>
<a name="TAG_WST_LIST_BLOCK_SIZE"></a>
<img src="Images/RXF-Config/listBlockSize.png"><br>
Define the default value of the size of a ListBlock used in ordered associations.<br>
<br>
<a name="TAG_WST_MAP_BLOCK_COUNT"></a>
<img src="Images/RXF-Config/mapBlockCount.png"><br>
Define the default value of how many MapBlocks are used in an associations with a qualifier.<br>
<br>
<a name="TAG_WST_MAP_BLOCK_SIZE"></a>
<img src="Images/RXF-Config/mapBlockSize.png"><br>
Define the default value of the size of a MapBlock used in an associations with a qualifier.<br>
<br>
<a name="TAG_UpdateProjectPath"></a>
<img src="Images/RXF-Config/updateProjectPath.png"><br>
By activate this tag every time the code generation is triggered the
parameter "CPP_CG.WillertRXF.ProjectPath" is set to the current path of
the Rhapsody model. This can be useful if the model is under subversion
control
and the model is checked out at different locations. Therefore the
property "CPP_CG.WillertRXF.ProjectPath" can be used to start user
applications / scripts which are stored relative to the model path. The
reason: While code generation / execution
Rhapsody only provides the path of the generated code path but not the
path to the model.<br>
<b>Info:</b> this property will only be changed if the new value is different from the previous value but if it is different it will change 
the model itself and you need a write permission<br>
<br>
</div>
<p id="Footer">This documentation belongs to the Product
RXF_Rpy_CPP_V7.05_edu, released on 2019-02-08.
&copy;&nbsp;2018 Willert Software Tools GmbH.</p>
</div>

</body></html>
